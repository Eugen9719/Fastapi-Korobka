import {BASE_URL} from './config.js';
import {getUser} from "./base.js";

document.addEventListener("DOMContentLoaded", async function () {
    const selectedDateElement = document.querySelector(".selected-date");
    const prevButton = document.querySelector(".prev-day");
    const nextButton = document.querySelector(".next-day");

    const stadiumId = document.getElementById("stadium-id").innerText;
    const timeSlots = document.querySelectorAll(".time-slot");

    let currentDate = new Date();


    const months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ];


    function updateDateDisplay() {
        let day = currentDate.getDate();
        let month = months[currentDate.getMonth()];
        selectedDateElement.textContent = `${day} ${month}`;
        fetchBookings(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã
    }

    prevButton.addEventListener("click", function () {
        currentDate.setDate(currentDate.getDate() - 1);
        updateDateDisplay();
    });

    nextButton.addEventListener("click", function () {
        currentDate.setDate(currentDate.getDate() + 1);
        updateDateDisplay();
    });

    function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const day = String(date.getDate()).padStart(2, "0");
        return `${year}-${month}-${day}`;
    }

    async function fetchBookings() {
        console.log("Date:", `${currentDate}`);
        try {
            const response = await fetch(`${BASE_URL}/booking/booking_from_date?stadium_id=${stadiumId}&date=${formatDate(currentDate)}`);
            const bookings = await response.json();
            await markBookedSlots(bookings);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: ", error);
        }
    }

    async function markBookedSlots(bookings) {
        const user = await getUser();
        if (!user) return;

        const allSlots = document.querySelectorAll('.time-slot');
        allSlots.forEach(slot => slot.classList.remove('booked', 'my-booking'));

        bookings.forEach(booking => {
            const startTime = booking.start_time.substring(11, 16);
            const endTime = booking.end_time.substring(11, 16);

            let currentTime = startTime;
            while (currentTime < endTime) {
                const nextTime = add30Minutes(currentTime);
                const slot = document.querySelector(`.time-slot[data-time="${currentTime}-${nextTime}"]`);
                console.log("Slot for time:", `${currentTime}-${nextTime}`);

                if (slot) {
                    if (booking.user_id === user.id) { // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ—Ä–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ booking
                        slot.classList.add("my-booking");
                    } else {
                        slot.classList.add("booked"); // –ß—É–∂–∞—è –±—Ä–æ–Ω—å
                    }
                } else {
                    console.error("Slot not found for time:", `${currentTime}-${nextTime}`);
                }
                currentTime = nextTime;
            }
        });
    }


    function add30Minutes(time) {
        const [hours, minutes] = time.split(':').map(Number);
        let newMinutes = minutes + 30;
        let newHours = hours;
        if (newMinutes >= 60) {
            newMinutes -= 60;
            newHours += 1;
        }
        return `${String(newHours).padStart(2, '0')}:${String(newMinutes).padStart(2, '0')}`;
    }


    // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    updateDateDisplay();
});


// create booking


document.addEventListener("DOMContentLoaded", function () {
    console.log("üìå –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω");

    const timeSlots = document.querySelectorAll(".time-slot");
    const bookButton = document.querySelector(".book-btn");
    const stadiumId = document.getElementById("stadium-id").innerText.trim();
    const selectedDateElement = document.querySelector(".selected-date");

    console.log(`üèüÔ∏è ID —Å—Ç–∞–¥–∏–æ–Ω–∞: ${stadiumId}`);

    function parseDate(dateString) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "29 —è–Ω–≤–∞—Ä—è" –≤ "2025-01-29"
        const months = {
            "—è–Ω–≤–∞—Ä—è": "01",
            "—Ñ–µ–≤—Ä–∞–ª—è": "02",
            "–º–∞—Ä—Ç–∞": "03",
            "–∞–ø—Ä–µ–ª—è": "04",
            "–º–∞—è": "05",
            "–∏—é–Ω—è": "06",
            "–∏—é–ª—è": "07",
            "–∞–≤–≥—É—Å—Ç–∞": "08",
            "—Å–µ–Ω—Ç—è–±—Ä—è": "09",
            "–æ–∫—Ç—è–±—Ä—è": "10",
            "–Ω–æ—è–±—Ä—è": "11",
            "–¥–µ–∫–∞–±—Ä—è": "12"
        };

        const [day, monthName] = dateString.split(" ");
        const month = months[monthName];
        const year = new Date().getFullYear(); // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥

        return `${year}-${month}-${day.padStart(2, "0")}`; // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    function updateBookButtonState() {
        const selectedSlots = document.querySelectorAll(".time-slot.selected");
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:`, selectedSlots.length > 0 ? "–ê–ö–¢–ò–í–ù–ê" : "–ù–ï –ê–ö–¢–ò–í–ù–ê");

        if (selectedSlots.length > 0) {
            bookButton.removeAttribute("disabled"); // –£–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç disabled
            bookButton.classList.add("active"); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏)
        } else {
            bookButton.setAttribute("disabled", "true"); // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç disabled
            bookButton.classList.remove("active");
        }

        console.log(`üìå –¢–µ–∫—É—â–∏–π –∞—Ç—Ä–∏–±—É—Ç disabled:`, bookButton.hasAttribute("disabled"));
    }


    // –í—ã–±–æ—Ä —Å–ª–æ—Ç–æ–≤
    timeSlots.forEach(slot => {
        slot.addEventListener("click", function () {
            if (!slot.classList.contains("booked")) {
                slot.classList.toggle("selected");
                console.log(`üü¢ –°–ª–æ—Ç ${slot.dataset.time} ${slot.classList.contains("selected") ? "–≤—ã–±—Ä–∞–Ω" : "—Å–Ω—è—Ç"}`);
                updateBookButtonState();
            } else {
                console.log(`‚õî –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç: ${slot.dataset.time}`);
            }
        });
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    async function createBookings() {
        const token = sessionStorage.getItem("authToken");
        if (!token) {
            alert("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
            return;
        }

        const selectedSlots = Array.from(document.querySelectorAll(".time-slot.selected"));

        if (selectedSlots.length === 0) return;

        const formattedDate = parseDate(selectedDateElement.innerText.trim()); // ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        selectedSlots.sort((a, b) => {
            const [aStart] = a.dataset.time.split("-");
            const [bStart] = b.dataset.time.split("-");
            return aStart.localeCompare(bStart);
        });

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç
        const firstSlot = selectedSlots[0];
        const lastSlot = selectedSlots[selectedSlots.length - 1];

        const [firstStartTime] = firstSlot.dataset.time.split("-");
        const [, lastEndTime] = lastSlot.dataset.time.split("-");

        const bookingData = {
            stadium_id: Number(stadiumId),
            start_time: `${formattedDate}T${firstStartTime}:00.000`,
            end_time: `${formattedDate}T${lastEndTime}:00.000`
        };

        console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", bookingData);

        try {
            const response = await fetch(`${BASE_URL}/booking/create`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify(bookingData)
            });

            if (!response.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
            }

            alert("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            selectedSlots.forEach(slot => {
                slot.classList.remove("selected");
                slot.classList.add("my-booking");
            });

            bookButton.disabled = true;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }


    bookButton.addEventListener("click", createBookings);
});


