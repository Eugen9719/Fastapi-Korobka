import stripe
from fastapi import APIRouter, Request, HTTPException

from backend.app.dependencies.service_factory import service_factory
from backend.app.models.bookings import StatusBooking
from backend.app.services.decorators import sentry_capture_exceptions
from backend.core.config import settings
from backend.core.db import SessionDep, TransactionSessionDep

webhook_router = APIRouter()


import logging

logger = logging.getLogger(__name__)

@webhook_router.post('/webhook/stripe')
@sentry_capture_exceptions
async def stripe_webhook(request: Request, db: TransactionSessionDep):
    payload = await request.body()
    sig_header = request.headers.get('stripe-signature')
    event = None

    logger.info("üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Stripe")

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET
        )
        logger.info("‚úÖ –°–æ–±—ã—Ç–∏–µ Stripe —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ")
    except ValueError as e:
        logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π payload: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π payload")
    except stripe.error.SignatureVerificationError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")

    logger.info(f"üì¶ –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {event['type']}")

    if event["type"] == "checkout.session.completed":
        session = event["data"]["object"]
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session}")

        metadata = session.get("metadata", {})
        if not metadata:
            logger.warning("‚ö†Ô∏è –í —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç metadata")
            return {"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç metadata"}

        booking_id = metadata.get("booking_id")
        if not booking_id:
            logger.warning("‚ö†Ô∏è –í metadata –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç booking_id")
            return {"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç booking_id"}

        logger.info(f"üîé Booking ID –∏–∑ metadata: {booking_id}")

        try:
            booking = await service_factory.booking_repo.get_or_404(db=db, object_id=int(booking_id))
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω booking: ID {booking.id}, —Å—Ç–∞—Ç—É—Å {booking.status}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ booking: {e}")
            raise HTTPException(status_code=404, detail="Booking –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if booking.status == StatusBooking.PENDING:
            booking.status = StatusBooking.COMPLETED
            booking.stripe_payment_intent_id = session.get("payment_intent")

            try:
                await service_factory.booking_repo.save_db(db, booking)
                logger.info(f"üíæ –°—Ç–∞—Ç—É—Å booking –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ COMPLETED –¥–ª—è ID {booking.id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ booking: {e}")
                raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å booking")

    return {"success": True}

